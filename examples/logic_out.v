// Generated by CIRCT unknown git version
module top(	// logic_opt.mlir:2:3
  input  [3:0] a,	// logic_opt.mlir:2:24
               b,	// logic_opt.mlir:2:43
               c,	// logic_opt.mlir:2:62
               d,	// logic_opt.mlir:2:81
  output [3:0] out1,
               out2
);

  wire [3:0] _GEN = a & b | ~a & c;	// logic_opt.mlir:5:10, :6:10, :7:10, :8:10
  wire [3:0] temp1;	// logic_opt.mlir:3:14
  assign temp1 = _GEN;	// logic_opt.mlir:3:14, :8:10
  wire [3:0] temp2;	// logic_opt.mlir:4:14
  assign temp2 = _GEN;	// logic_opt.mlir:4:14, :8:10
  assign out1 = temp1 ^ d;	// logic_opt.mlir:3:14, :9:10, :11:5
  assign out2 = temp2 | d;	// logic_opt.mlir:4:14, :10:10, :11:5
endmodule

module {
  hw.module @top(in %a : i4, in %b : i4, in %c : i4, in %d : i4, out out1 : i4, out out2 : i4) {
    %0 = comb.and %a, %b : i4
    %c-1_i4 = hw.constant -1 : i4
    %1 = comb.xor %a, %c-1_i4 : i4
    %2 = comb.and %1, %c : i4
    %3 = comb.or %0, %2 : i4
    %4 = sv.wire {hw.verilogName = "_GEN"} : !hw.inout<i4>
    sv.assign %4, %3 : i4
    %temp1 = sv.wire {hw.verilogName = "temp1"} : !hw.inout<i4>
    %5 = sv.read_inout %4 : !hw.inout<i4>
    sv.assign %temp1, %5 : i4
    %temp2 = sv.wire {hw.verilogName = "temp2"} : !hw.inout<i4>
    %6 = sv.read_inout %4 : !hw.inout<i4>
    sv.assign %temp2, %6 : i4
    %7 = sv.read_inout %temp1 : !hw.inout<i4>
    %8 = comb.xor %7, %d : i4
    %9 = sv.read_inout %temp2 : !hw.inout<i4>
    %10 = comb.or %9, %d : i4
    hw.output %8, %10 : i4, i4
  }
}

